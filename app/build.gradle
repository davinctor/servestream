apply plugin: 'com.android.application'

android {
    compileSdkVersion 'Google Inc.:Google APIs:23'
    buildToolsVersion "23.0.2"

    def mkfile = "NDK_APPLICATION_MK=Application.mk"

    defaultConfig {
        applicationId "net.sourceforge.servestream"
        minSdkVersion 11
        targetSdkVersion 23
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'src/main/libs' // This is not necessary unless you have precompiled libraries in your project.
    }

    task buildFFmpeg(type: Exec, description: 'Compile FFmpeg source via NDK') {
        def dir = file('src/main/scripts/build-ffmpeg.sh').absolutePath
        commandLine "$dir"
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = android.ndkDirectory
        print mkfile
        commandLine "$ndkDir/ndk-build",
                mkfile,
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                'clean'
    }

    clean.dependsOn 'cleanNative'
    buildNative.dependsOn 'buildFFmpeg'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'x86', 'mips'
            universalApk true
        }
    }

    productFlavors {
        regular {
            ndk {

            }
        }
        fat {
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "mips", "x86"
            }
        }
        arm {
            ndk {
                abiFilter "armeabi"
            }
        }
        armv7a {
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        mips {
            ndk {
                abiFilter "mips"
            }
        }
        x86 {
            ndk {
                abiFilter "x86"
            }
        }
    }

    Map<String, Integer> versionCodes = [armeabi: 10, 'armeabi-v7a': 11, mips: 12, x86: 13]

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            int abiVersionCode = versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI)) ?: 0
            output.versionCodeOverride = abiVersionCode + 6
            // android.defaultConfig.versionCode
        }
    }
}

dependencies {
    compile files('libs/jplaylistparser-0.2.5.jar')
    compile files('libs/jsoup-1.8.1.jar')
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile project(':dslv')
}
